// src/app/Store/store/store.page.ts
import { Component, OnInit } from '@angular/core';
import { StoreService } from '../../Service/store.service'; // d√πng ƒë√∫ng ƒë∆∞·ªùng d·∫´n
import { Store } from '../../models/store.model';
import {AlertController, AlertInput} from '@ionic/angular';
import { StoreCreateDto } from 'src/app/models/StoreCreateDto.model';
import {UserService} from "../../Users/service/user.service";





@Component({
  selector: 'app-store',
  templateUrl: './store.page.html',
  styleUrls: ['./store.page.scss'],
  standalone: false
})
export class StorePage implements OnInit {
  searchText = '';

  async editStore(item: any) {
    if (!item) return;

    const alert = await this.alertCtrl.create({
      header: 'S·ª≠a th√¥ng tin c·ª≠a h√†ng',
      inputs: [
        {
          name: 'name',
          type: 'text',
          placeholder: 'T√™n c·ª≠a h√†ng',
          value: item.name
        },
        {
          name: 'address',
          type: 'text',
          placeholder: 'ƒê·ªãa ch·ªâ',
          value: item.address
        },
        {
          name: 'phoneNumber',
          type: 'text',
          placeholder: 'S·ªë ƒëi·ªán tho·∫°i',
          value: item.phoneNumber
        },
        {
          name: 'managerId',
          type: 'text',
          placeholder: 'ID ng∆∞·ªùi qu·∫£n l√Ω',
          value: item.managerId
        }
      ],
      buttons: [
        { text: 'H·ªßy', role: 'cancel' },
        {
          text: 'L∆∞u',
          handler: data => {
            const updatedStore = {
              id: item.id,
              name: data.name,
              address: data.address,
              phoneNumber: data.phoneNumber,
              managerId: data.managerId
            };

            this.storeService.update(updatedStore).subscribe({
              next: () => {
                Object.assign(item, updatedStore); // C·∫≠p nh·∫≠t ngay trong danh s√°ch n·∫øu c·∫ßn
                this.loadStores(); // T·∫£i l·∫°i n·∫øu mu·ªën
                console.log('‚úîÔ∏è C·∫≠p nh·∫≠t c·ª≠a h√†ng th√†nh c√¥ng');
              },
              error: err => {
                console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c·ª≠a h√†ng:', err);
              }
            });
          }
        }
      ]
    });

    await alert.present();
  }



  deleteStore(item: any) {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c·ª≠a h√†ng n√†y kh√¥ng?')) {
      this.storeService.delete(item.id).subscribe({
        next: () => {
          alert('ƒê√£ x√≥a c·ª≠a h√†ng.');
          this.loadStores(); // reload danh s√°ch
        },
        error: err => {
          console.error('L·ªói x√≥a:', err);
        }
      });
    }
  }
  stores: Store[] = [];
  isSidebarVisible: boolean = false;
  isLoading: boolean = true;
  errorMessage: string = '';


  constructor(private storeService: StoreService,private alertCtrl: AlertController, private userService: UserService
  ) {}
  users: any[] = [];  // l∆∞u danh s√°ch user
  ngOnInit(): void {
    this.loadStores();
    this.loadUsers(); // üëà th√™m d√≤ng n√†y
  }

  item = {
    id: 'a2f1-345b-...',          // m√£ ƒë·ªãnh danh duy nh·∫•t
    name: 'C·ª≠a h√†ng Trung T√¢m',
    address: '123 L√™ L·ª£i, Q1',
    phone: '0123456789',
    // c√≥ th·ªÉ c√≥ th√™m c√°c tr∆∞·ªùng kh√°c
  };


  toggleSidebar(): void {
    this.isSidebarVisible = !this.isSidebarVisible;
  }
  loadUsers() {
    this.userService.getAllUsers().subscribe({
      next: (res: any[]) => {
        this.users = res;
      },
      error: err => {
        console.error('L·ªói khi load danh s√°ch user:', err);
        this.errorMessage = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng.';
      }
    });
  }


  loadStores(): void {
    this.isLoading = true;
    this.storeService.getAllStores().subscribe({
      next: (data) => {
        this.stores = data || []; // ‚úÖ ƒê·∫£m b·∫£o lu√¥n l√† m·∫£ng
        console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API:', this.stores);

        this.isLoading = false;
        this.errorMessage = '';
      },
      error: (error: any) => {
        console.error({error: 'L·ªói khi t·∫£i danh s√°ch c·ª≠a h√†ng:'}, error);
        this.errorMessage = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i.';
        this.isLoading = false;
      }
    });
  }
  async addStore() {
    const managers = this.users.filter(user => user.role === 'manager' || 'Admin'); // Ho·∫∑c user.isManager === true

    const managerOptions: AlertInput[] = managers.map((user, index) => ({
      type: 'radio' as const,
      label: `${user.fullname} (${user.email})`,
      value: user.id,
      checked: index === 0
    }));


    const alertManager = await this.alertCtrl.create({
      header: 'Ch·ªçn ng∆∞·ªùi qu·∫£n l√Ω',
      inputs: managerOptions,
      buttons: [
        {text: 'H·ªßy', role: 'cancel'},
        {
          text: 'Ti·∫øp t·ª•c',
          handler: async (selectedManagerId) => {
            if (!selectedManagerId) {
              console.warn("‚ö†Ô∏è Ch∆∞a ch·ªçn ng∆∞·ªùi qu·∫£n l√Ω");
              return;
            }

            // Hi·ªÉn th·ªã form nh·∫≠p th√¥ng tin c·ª≠a h√†ng
            const alertStore = await this.alertCtrl.create({
              header: 'Th√™m c·ª≠a h√†ng',
              inputs: [
                {name: 'name', type: 'text', placeholder: 'T√™n c·ª≠a h√†ng'},
                {name: 'address', type: 'text', placeholder: 'ƒê·ªãa ch·ªâ'},
                {name: 'phoneNumber', type: 'text', placeholder: 'S·ªë ƒëi·ªán tho·∫°i'}
              ],
              buttons: [
                {text: 'H·ªßy', role: 'cancel'},
                {
                  text: 'L∆∞u',
                  handler: (data) => {
                    if (data.name && data.address && data.phoneNumber) {
                      const payload: StoreCreateDto = {
                        name: data.name,
                        address: data.address,
                        phoneNumber: data.phoneNumber,
                        managerId: selectedManagerId
                      };

                      this.storeService.addStore(payload).subscribe({
                        next: res => {
                          this.stores.push(res);
                          console.log("‚úÖ Th√™m c·ª≠a h√†ng th√†nh c√¥ng");
                        },
                        error: err => {
                          console.error("‚ùå L·ªói khi th√™m c·ª≠a h√†ng:", err);
                        }
                      });
                    } else {
                      console.warn("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin");
                    }
                  }
                }
              ]
            });

            await alertStore.present();
          }
        }
      ]
    });


    await alertManager.present();
  }

// store.page.ts

// ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√≥ c√°c bi·∫øn sau:
  filteredStoresList: Store[] = []; // k·∫øt qu·∫£ sau khi l·ªçc n·∫øu c√≥ t√¨m ki·∫øm
  currentPage: number = 1;
  pageSize: number = 3; // s·ªë d√≤ng m·ªói trang



// Di chuy·ªÉn trang
  nextPage() {
    if (this.currentPage < this.totalPages) this.currentPage++;
  }

  prevPage() {
    if (this.currentPage > 1) this.currentPage--;
  }

  firstPage() {
    this.currentPage = 1;
  }

  lastPage() {
    this.currentPage = this.totalPages;
  }

  get filteredStores(): Store[] {
    if (!this.searchText || !this.searchText.trim()) return this.stores;
    return this.stores.filter(store =>
      store.name.toLowerCase().includes(this.searchText.toLowerCase())
    );
  }

  get totalPages(): number {
    return Math.ceil(this.filteredStores.length / this.pageSize);
  }

  get paginatedStores(): Store[] {
    const startIndex = (this.currentPage - 1) * this.pageSize;
    return this.filteredStores.slice(startIndex, startIndex + this.pageSize);
  }





}
